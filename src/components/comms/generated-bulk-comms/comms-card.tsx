import { FunctionComponent, useRef, useState } from 'react';
import { SheetGeneration } from '@lib/domain/sheet-generation';
import {
  EuiPanel,
  EuiFlexGroup,
  EuiFlexItem,
  EuiText,
  EuiSpacer,
  EuiButtonIcon,
  EuiBadge,
  copyToClipboard,
  EuiIcon,
  EuiDescriptionList,
  EuiButton,
} from '@elastic/eui';
import { renderName } from '@lib/person/utils';
import { IoMdMail } from 'react-icons/io';
import { Structure, StructureType } from '@lib/domain/stuctures';
import { useSession } from 'next-auth/react';
import { appsignal } from '@lib/appsignal';
import { BulkComms } from '@lib/domain/bulk-comms';
import moment from 'moment';

export type Props = {
  data?: BulkComms;
  key?: string;
};

export const renderStructureOption = (structure: Partial<Structure>) => {
  let label: string = StructureType.Unkown;
  let description = 'Unknown';
  switch (structure?.type.toLowerCase() as StructureType) {
    case StructureType.Constituency:
      label = structure?.constituency;
      description = `Constiteuncy, ${structure?.province}`;
      break;
    case StructureType.Province:
      label = structure.province;
      description = `Province, ${structure?.province}`;
      break;
    case StructureType.Municipality:
      label = structure.municipalityShortName;
      description = `Municipality, ${structure?.province}`;
      break;
    case StructureType.Region:
      label = structure?.region;
      description = `Region, ${structure?.province}`;
      break;
    case StructureType.VotingDistrict:
      label = `${structure?.votingDistrict} (${structure?.votingDistrict_id})`;
      description = `Voting district, ${structure?.province}`;
      break;
    case StructureType.Ward:
      label = `${structure?.municipalityShortName} Ward ${structure?.ward_num}`;
      description = `Ward, ${structure?.province}`;
      break;
  }

  return (
    <div>
      <EuiText size="xs">{label}</EuiText>
      <EuiText size="xs" color="subdued">
        {description}
      </EuiText>
    </div>
  );
};

const CommsCard: FunctionComponent<Props> = ({ data, key }) => {
  const buttonRef = useRef<HTMLButtonElement | null>(null);
  const requestType = data?.type?.name === 'sms' ? 'SMS' : 'EMAIL';
  const [isTextCopied, setTextCopied] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const { data: session } = useSession();

  const onClick = () => {
    if (buttonRef.current) {
      buttonRef.current.focus();
      copyToClipboard(data?.message?.toString());
      setTextCopied(true);
    }
  };

  const onBlur = () => {
    setTextCopied(false);
  };
  const [showFullText, setShowFullText] = useState(false);

  const handleShowFullText = () => {
    setShowFullText(true);
  };

  const handleCloseFullText = () => {
    setShowFullText(false);
  };
  const maxTextLength = 45;
  const truncatedRequestReason = data?.requestReason?.slice(0, maxTextLength);
  const hasTruncatedRequestReason = data?.requestReason?.length > maxTextLength;
  const requestedDate = moment(data?.createdBy.date).format('DD MMM YYYY');
  const requestedDaysAgo = moment(data?.createdBy.date).fromNow(true);

  const handleDelete = async (actvityKey: string) => {
    setIsDeleting(true);
    const url = `${process.env.NEXT_PUBLIC_API_BASE}/activity`;
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${session.accessToken}`,
      },
      method: 'PUT',
      body: JSON.stringify({
        key: actvityKey,
        status: 'DELETED',
      }),
    });

    if (!response.ok) {
      const errJson = JSON.parse(await response.clone().text());
      appsignal.sendError(
        new Error(`Unable to delete activity: ${errJson.message}`),
        span => {
          span.setAction('api-call');
          span.setParams({
            route: url,
            actvityKey,
          });
          span.setTags({ user_darn: session.user.darn.toString() });
        }
      );
      setIsDeleting(false);
      return;
    }

    const respPayload = await response.json();
    console.log({ respPayload });
    // await sheetGenMutate();
    setIsDeleting(false);
  };

  const cardInfo = [
    {
      title: 'Reason for request:',
      description: `${data?.requestReason}`,
    },
    {
      title: `${requestType === 'SMS' ? 'Message:' : ''}`,
      description: `${requestType === 'SMS' ? data?.message : ''}`,
    },
    {
      title: `${requestType === 'SMS' ? 'Message cost:' : ''}`,
      description: `${requestType === 'SMS' ? `R ${data?.cost}` : ''}`,
    },
    {
      title: 'Sender:',
      description: `${data?.metaData?.sender}`,
    },
    {
      title: `${data?.status === 'DONE' ? 'Generated by:' : 'Requested By:'}`,
      description: `${
        data?.status === 'DONE'
          ? `Generated by ${renderName(
              data?.createdBy
            )} on ${requestedDate} (${requestedDaysAgo} ago)`
          : `${renderName(
              data?.createdBy
            )} on ${requestedDate} (${requestedDaysAgo} ago)`
      }`,
    },
    {
      title: `${data.status === 'DONE' ? 'Approved By:' : ''} `,
      description:
        renderName(data?.modifiedBy) && data.status === 'DONE'
          ? `${renderName(
              data.modifiedBy
            )} on ${requestedDate} (${requestedDaysAgo} ago)`
          : '',
    },
  ];

  return (
    <>
      <EuiPanel key={key} grow={false}>
        <EuiFlexGroup justifyContent="spaceBetween" alignItems="center">
          <EuiFlexItem grow={false}>
            <EuiFlexGroup alignItems="flexStart" justifyContent="flexStart">
              <EuiFlexItem grow={false}>
                <EuiBadge
                  color="primary"
                  style={{ height: '23px', width: '35px' }}>
                  <EuiIcon type={requestType === 'SMS' ? 'mobile' : IoMdMail} />
                </EuiBadge>
              </EuiFlexItem>
              <EuiFlexItem grow={false}>
                <EuiText size="m">
                  <strong>{data?.campaign?.name}</strong>
                </EuiText>
              </EuiFlexItem>
            </EuiFlexGroup>
          </EuiFlexItem>

          <EuiFlexItem grow={false}>
            <EuiFlexGroup alignItems="flexEnd" justifyContent="flexEnd">
              {true && (
                <EuiText style={{ width: '200px' }} size="s">
                  <strong>Status: </strong>
                  <EuiBadge
                    color={
                      data?.status === 'REJECTED'
                        ? 'warning'
                        : data?.status === 'PENDING_APPROVAL'
                        ? 'default'
                        : data?.status === 'DONE'
                        ? 'primary'
                        : 'default'
                    }>
                    {data?.status.replace(/_/g, ' ')}
                  </EuiBadge>
                </EuiText>
              )}
            </EuiFlexGroup>
          </EuiFlexItem>
          <EuiFlexItem grow={false}>
            <EuiButtonIcon
              iconType="trash"
              size="m"
              color="primary"
              aria-label="Delete"
              // isLoading={isDeleting}
              onClick={() => handleDelete(data?.key)}
            />
          </EuiFlexItem>
        </EuiFlexGroup>

        <EuiSpacer size="s" />

        <EuiFlexGroup
          justifyContent="flexStart"
          alignItems="flexStart"
          wrap
          gutterSize="xs">
          {data?.structures?.length > 0 ? (
            data.structures.map((structure, index) => (
              <EuiPanel
                grow={false}
                key={index}
                paddingSize="s"
                css={{
                  borderColor: '#155FA2',
                }}
                hasBorder={true}
                hasShadow={false}>
                <EuiFlexGroup responsive={false}>
                  <EuiFlexItem>{renderStructureOption(structure)}</EuiFlexItem>
                </EuiFlexGroup>
              </EuiPanel>
            ))
          ) : (
            <EuiText size="s" color="warning">
              Unknown structure
            </EuiText>
          )}
        </EuiFlexGroup>

        <EuiSpacer size="s" />

        <EuiFlexGroup justifyContent="spaceBetween" alignItems="flexStart">
          <EuiFlexItem grow={2}>
            <EuiDescriptionList
              listItems={cardInfo}
              compressed
              gutterSize="s"
            />

            <EuiFlexGroup alignItems="flexEnd" justifyContent="flexEnd">
              <EuiFlexItem grow={false}>
                <EuiSpacer size="xs" />
                {data.status !== 'REJECTED' &&
                  data.status !== 'PENDING_APPROVAL' &&
                  data.status !== 'PENDING' && (
                    <EuiButton
                      style={{ width: '200px' }}
                      // href={`/api/download/${data.files[0].key}`}
                      target="_blank">
                      Download
                    </EuiButton>
                  )}
              </EuiFlexItem>
            </EuiFlexGroup>
          </EuiFlexItem>
        </EuiFlexGroup>
      </EuiPanel>
      <EuiSpacer />
    </>
  );
};

export default CommsCard;
